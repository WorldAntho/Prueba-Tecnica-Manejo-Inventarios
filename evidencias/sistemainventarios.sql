-- MySQL Script generated by MySQL Workbench
-- Mon Jun  2 08:24:53 2025
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema gestioninventarios
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema gestioninventarios
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `gestioninventarios` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci ;
USE `gestioninventarios` ;

-- -----------------------------------------------------
-- Table `gestioninventarios`.`categorias`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gestioninventarios`.`categorias` (
  `IdCategoria` INT NOT NULL AUTO_INCREMENT,
  `Nombre` VARCHAR(100) NOT NULL,
  `Descripcion` VARCHAR(255) NULL DEFAULT NULL,
  `Activo` TINYINT(1) NOT NULL DEFAULT '1',
  `FechaCreacion` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `FechaActualizacion` TIMESTAMP NULL DEFAULT NULL,
  PRIMARY KEY (`IdCategoria`))
ENGINE = InnoDB
AUTO_INCREMENT = 6
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_unicode_ci;


-- -----------------------------------------------------
-- Table `gestioninventarios`.`adjuntos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gestioninventarios`.`adjuntos` (
  `idadjuntos` INT NOT NULL AUTO_INCREMENT,
  `NombreArchivo` VARCHAR(45) NULL,
  `Extension` VARCHAR(45) NULL,
  `MimeType` VARCHAR(45) NULL,
  `TamanioBytes` INT(11) NULL,
  `Ruta` VARCHAR(255) NULL,
  PRIMARY KEY (`idadjuntos`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `gestioninventarios`.`productos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gestioninventarios`.`productos` (
  `IdProducto` INT NOT NULL AUTO_INCREMENT,
  `Nombre` VARCHAR(200) NOT NULL,
  `Descripcion` TEXT NULL DEFAULT NULL,
  `IdCategoria` INT NOT NULL,
  `idadjuntos` INT NOT NULL,
  `Precio` DECIMAL(18,2) NOT NULL,
  `Stock` INT NOT NULL DEFAULT '0',
  `Activo` TINYINT(1) NOT NULL DEFAULT '1',
  `FechaCreacion` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `FechaActualizacion` TIMESTAMP NULL DEFAULT NULL,
  PRIMARY KEY (`IdProducto`),
  INDEX `IX_Productos_Categoria` (`IdCategoria` ASC) VISIBLE,
  INDEX `IX_Productos_Nombre` (`Nombre` ASC) VISIBLE,
  INDEX `IX_Productos_Activo` (`Activo` ASC) VISIBLE,
  INDEX `fk_productos_adjuntos1_idx` (`idadjuntos` ASC) VISIBLE,
  CONSTRAINT `FK_Productos_Categorias`
    FOREIGN KEY (`IdCategoria`)
    REFERENCES `gestioninventarios`.`categorias` (`IdCategoria`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_productos_adjuntos1`
    FOREIGN KEY (`idadjuntos`)
    REFERENCES `gestioninventarios`.`adjuntos` (`idadjuntos`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 6
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_unicode_ci;


-- -----------------------------------------------------
-- Table `gestioninventarios`.`tipostransaccion`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gestioninventarios`.`tipostransaccion` (
  `IdTipoTransaccion` INT NOT NULL AUTO_INCREMENT,
  `Nombre` VARCHAR(50) NOT NULL,
  `Descripcion` VARCHAR(200) NULL DEFAULT NULL,
  `Activo` TINYINT(1) NOT NULL DEFAULT '1',
  PRIMARY KEY (`IdTipoTransaccion`),
  UNIQUE INDEX `Nombre` (`Nombre` ASC) VISIBLE)
ENGINE = InnoDB
AUTO_INCREMENT = 3
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_unicode_ci;


-- -----------------------------------------------------
-- Table `gestioninventarios`.`transacciones`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gestioninventarios`.`transacciones` (
  `IdTransaccion` INT NOT NULL AUTO_INCREMENT,
  `Fecha` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `IdTipoTransaccion` INT NOT NULL,
  `IdProducto` INT NOT NULL,
  `Cantidad` INT NOT NULL,
  `PrecioUnitario` DECIMAL(18,2) NOT NULL,
  `PrecioTotal` DECIMAL(18,2) GENERATED ALWAYS AS ((`Cantidad` * `PrecioUnitario`)) STORED,
  `Detalle` VARCHAR(500) NULL DEFAULT NULL,
  `NumeroDocumento` VARCHAR(50) NULL DEFAULT NULL,
  `Activo` TINYINT(1) NOT NULL DEFAULT '1',
  `FechaCreacion` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`IdTransaccion`),
  INDEX `IX_Transacciones_Producto` (`IdProducto` ASC) VISIBLE,
  INDEX `IX_Transacciones_Fecha` (`Fecha` ASC) VISIBLE,
  INDEX `IX_Transacciones_Tipo` (`IdTipoTransaccion` ASC) VISIBLE,
  INDEX `IX_Transacciones_Fecha_Tipo` (`Fecha` ASC, `IdTipoTransaccion` ASC) VISIBLE,
  CONSTRAINT `FK_Transacciones_Productos`
    FOREIGN KEY (`IdProducto`)
    REFERENCES `gestioninventarios`.`productos` (`IdProducto`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_Transacciones_TiposTransaccion`
    FOREIGN KEY (`IdTipoTransaccion`)
    REFERENCES `gestioninventarios`.`tipostransaccion` (`IdTipoTransaccion`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_unicode_ci;


-- -----------------------------------------------------
-- Table `gestioninventarios`.`historialstock`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gestioninventarios`.`historialstock` (
  `IdHistorial` INT NOT NULL AUTO_INCREMENT,
  `IdProducto` INT NOT NULL,
  `StockAnterior` INT NOT NULL,
  `StockNuevo` INT NOT NULL,
  `Diferencia` INT GENERATED ALWAYS AS ((`StockNuevo` - `StockAnterior`)) STORED,
  `IdTransaccion` INT NULL DEFAULT NULL,
  `Motivo` VARCHAR(200) NULL DEFAULT NULL,
  `Fecha` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`IdHistorial`),
  INDEX `FK_HistorialStock_Transacciones` (`IdTransaccion` ASC) VISIBLE,
  INDEX `IX_HistorialStock_Producto` (`IdProducto` ASC) VISIBLE,
  INDEX `IX_HistorialStock_Fecha` (`Fecha` ASC) VISIBLE,
  CONSTRAINT `FK_HistorialStock_Productos`
    FOREIGN KEY (`IdProducto`)
    REFERENCES `gestioninventarios`.`productos` (`IdProducto`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_HistorialStock_Transacciones`
    FOREIGN KEY (`IdTransaccion`)
    REFERENCES `gestioninventarios`.`transacciones` (`IdTransaccion`)
    ON DELETE SET NULL
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_unicode_ci;

USE `gestioninventarios` ;

-- -----------------------------------------------------
-- Placeholder table for view `gestioninventarios`.`vw_productoscompletos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gestioninventarios`.`vw_productoscompletos` (`IdProducto` INT, `Nombre` INT, `Descripcion` INT, `Categoria` INT, `ImagenUrl` INT, `Precio` INT, `Stock` INT, `Activo` INT, `FechaCreacion` INT, `FechaActualizacion` INT);

-- -----------------------------------------------------
-- Placeholder table for view `gestioninventarios`.`vw_stockbajo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gestioninventarios`.`vw_stockbajo` (`IdProducto` INT, `Nombre` INT, `Categoria` INT, `Stock` INT, `Precio` INT);

-- -----------------------------------------------------
-- Placeholder table for view `gestioninventarios`.`vw_transaccionescompletas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gestioninventarios`.`vw_transaccionescompletas` (`IdTransaccion` INT, `Fecha` INT, `TipoTransaccion` INT, `Producto` INT, `StockActual` INT, `Cantidad` INT, `PrecioUnitario` INT, `PrecioTotal` INT, `Detalle` INT, `NumeroDocumento` INT);

-- -----------------------------------------------------
-- procedure SP_ObtenerProductosPaginados
-- -----------------------------------------------------

DELIMITER $$
USE `gestioninventarios`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_ObtenerProductosPaginados`(
    IN p_PageNumber INT,
    IN p_PageSize INT,
    IN p_FiltroNombre VARCHAR(200),
    IN p_FiltroCategoria INT,
    IN p_OrdenarPor VARCHAR(50)
)
BEGIN
    DECLARE v_Offset INT DEFAULT 0;
    DECLARE v_OrderClause VARCHAR(100) DEFAULT 'p.Nombre';
    
    SET v_Offset = (p_PageNumber - 1) * p_PageSize;
    
    -- Determinar orden
    CASE p_OrdenarPor
        WHEN 'Precio' THEN SET v_OrderClause = 'p.Precio';
        WHEN 'Stock' THEN SET v_OrderClause = 'p.Stock';
        WHEN 'Fecha' THEN SET v_OrderClause = 'p.FechaCreacion DESC';
        ELSE SET v_OrderClause = 'p.Nombre';
    END CASE;
    
    -- Query principal con paginaci√≥n
    SET @sql = CONCAT('
        SELECT 
            p.IdProducto,
            p.Nombre,
            p.Descripcion,
            c.Nombre AS Categoria,
            p.ImagenUrl,
            p.Precio,
            p.Stock,
            p.FechaCreacion
        FROM Productos p
        INNER JOIN Categorias c ON p.IdCategoria = c.IdCategoria
        WHERE p.Activo = TRUE',
        CASE WHEN p_FiltroNombre IS NOT NULL THEN 
            CONCAT(' AND p.Nombre LIKE ''%', p_FiltroNombre, '%''') 
            ELSE '' END,
        CASE WHEN p_FiltroCategoria IS NOT NULL THEN 
            CONCAT(' AND p.IdCategoria = ', p_FiltroCategoria) 
            ELSE '' END,
        ' ORDER BY ', v_OrderClause,
        ' LIMIT ', p_PageSize, ' OFFSET ', v_Offset
    );
    
    PREPARE stmt FROM @sql;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;
    
    -- Contar total de registros
    SET @count_sql = CONCAT('
        SELECT COUNT(*) AS TotalRegistros
        FROM Productos p
        WHERE p.Activo = TRUE',
        CASE WHEN p_FiltroNombre IS NOT NULL THEN 
            CONCAT(' AND p.Nombre LIKE ''%', p_FiltroNombre, '%''') 
            ELSE '' END,
        CASE WHEN p_FiltroCategoria IS NOT NULL THEN 
            CONCAT(' AND p.IdCategoria = ', p_FiltroCategoria) 
            ELSE '' END
    );
    
    PREPARE count_stmt FROM @count_sql;
    EXECUTE count_stmt;
    DEALLOCATE PREPARE count_stmt;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_ObtenerTransaccionesPaginadas
-- -----------------------------------------------------

DELIMITER $$
USE `gestioninventarios`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_ObtenerTransaccionesPaginadas`(
    IN p_PageNumber INT,
    IN p_PageSize INT,
    IN p_FechaInicio TIMESTAMP,
    IN p_FechaFin TIMESTAMP,
    IN p_TipoTransaccion INT,
    IN p_IdProducto INT
)
BEGIN
    DECLARE v_Offset INT DEFAULT 0;
    
    SET v_Offset = (p_PageNumber - 1) * p_PageSize;
    
    -- Query principal con paginaci√≥n
    SET @sql = CONCAT('
        SELECT 
            t.IdTransaccion,
            t.Fecha,
            tt.Nombre AS TipoTransaccion,
            p.Nombre AS Producto,
            t.Cantidad,
            t.PrecioUnitario,
            t.PrecioTotal,
            t.Detalle
        FROM Transacciones t
        INNER JOIN TiposTransaccion tt ON t.IdTipoTransaccion = tt.IdTipoTransaccion
        INNER JOIN Productos p ON t.IdProducto = p.IdProducto
        WHERE t.Activo = TRUE',
        CASE WHEN p_FechaInicio IS NOT NULL THEN 
            CONCAT(' AND t.Fecha >= ''', p_FechaInicio, '''') 
            ELSE '' END,
        CASE WHEN p_FechaFin IS NOT NULL THEN 
            CONCAT(' AND t.Fecha <= ''', p_FechaFin, '''') 
            ELSE '' END,
        CASE WHEN p_TipoTransaccion IS NOT NULL THEN 
            CONCAT(' AND t.IdTipoTransaccion = ', p_TipoTransaccion) 
            ELSE '' END,
        CASE WHEN p_IdProducto IS NOT NULL THEN 
            CONCAT(' AND t.IdProducto = ', p_IdProducto) 
            ELSE '' END,
        ' ORDER BY t.Fecha DESC',
        ' LIMIT ', p_PageSize, ' OFFSET ', v_Offset
    );
    
    PREPARE stmt FROM @sql;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;
    
    -- Contar total de registros
    SET @count_sql = CONCAT('
        SELECT COUNT(*) AS TotalRegistros
        FROM Transacciones t
        WHERE t.Activo = TRUE',
        CASE WHEN p_FechaInicio IS NOT NULL THEN 
            CONCAT(' AND t.Fecha >= ''', p_FechaInicio, '''') 
            ELSE '' END,
        CASE WHEN p_FechaFin IS NOT NULL THEN 
            CONCAT(' AND t.Fecha <= ''', p_FechaFin, '''') 
            ELSE '' END,
        CASE WHEN p_TipoTransaccion IS NOT NULL THEN 
            CONCAT(' AND t.IdTipoTransaccion = ', p_TipoTransaccion) 
            ELSE '' END,
        CASE WHEN p_IdProducto IS NOT NULL THEN 
            CONCAT(' AND t.IdProducto = ', p_IdProducto) 
            ELSE '' END
    );
    
    PREPARE count_stmt FROM @count_sql;
    EXECUTE count_stmt;
    DEALLOCATE PREPARE count_stmt;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_ValidarStockVenta
-- -----------------------------------------------------

DELIMITER $$
USE `gestioninventarios`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_ValidarStockVenta`(
    IN p_IdProducto INT,
    IN p_Cantidad INT,
    OUT p_Resultado BOOLEAN,
    OUT p_Mensaje VARCHAR(255)
)
BEGIN
    DECLARE v_StockActual INT DEFAULT 0;
    DECLARE v_NombreProducto VARCHAR(200);
    
    -- Obtener stock actual y nombre del producto
    SELECT Stock, Nombre 
    INTO v_StockActual, v_NombreProducto
    FROM Productos 
    WHERE IdProducto = p_IdProducto AND Activo = TRUE;
    
    IF v_StockActual IS NULL THEN
        SET p_Resultado = FALSE;
        SET p_Mensaje = 'Producto no encontrado o inactivo';
    ELSEIF v_StockActual < p_Cantidad THEN
        SET p_Resultado = FALSE;
        SET p_Mensaje = CONCAT('Stock insuficiente para ', v_NombreProducto, 
                              '. Disponible: ', v_StockActual, 
                              ', Solicitado: ', p_Cantidad);
    ELSE
        SET p_Resultado = TRUE;
        SET p_Mensaje = 'Stock suficiente';
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- View `gestioninventarios`.`vw_productoscompletos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gestioninventarios`.`vw_productoscompletos`;
USE `gestioninventarios`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `gestioninventarios`.`vw_productoscompletos` AS select `p`.`IdProducto` AS `IdProducto`,`p`.`Nombre` AS `Nombre`,`p`.`Descripcion` AS `Descripcion`,`c`.`Nombre` AS `Categoria`,`p`.`ImagenUrl` AS `ImagenUrl`,`p`.`Precio` AS `Precio`,`p`.`Stock` AS `Stock`,`p`.`Activo` AS `Activo`,`p`.`FechaCreacion` AS `FechaCreacion`,`p`.`FechaActualizacion` AS `FechaActualizacion` from (`gestioninventarios`.`productos` `p` join `gestioninventarios`.`categorias` `c` on((`p`.`IdCategoria` = `c`.`IdCategoria`)));

-- -----------------------------------------------------
-- View `gestioninventarios`.`vw_stockbajo`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gestioninventarios`.`vw_stockbajo`;
USE `gestioninventarios`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `gestioninventarios`.`vw_stockbajo` AS select `p`.`IdProducto` AS `IdProducto`,`p`.`Nombre` AS `Nombre`,`c`.`Nombre` AS `Categoria`,`p`.`Stock` AS `Stock`,`p`.`Precio` AS `Precio` from (`gestioninventarios`.`productos` `p` join `gestioninventarios`.`categorias` `c` on((`p`.`IdCategoria` = `c`.`IdCategoria`))) where ((`p`.`Stock` < 10) and (`p`.`Activo` = true));

-- -----------------------------------------------------
-- View `gestioninventarios`.`vw_transaccionescompletas`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gestioninventarios`.`vw_transaccionescompletas`;
USE `gestioninventarios`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `gestioninventarios`.`vw_transaccionescompletas` AS select `t`.`IdTransaccion` AS `IdTransaccion`,`t`.`Fecha` AS `Fecha`,`tt`.`Nombre` AS `TipoTransaccion`,`p`.`Nombre` AS `Producto`,`p`.`Stock` AS `StockActual`,`t`.`Cantidad` AS `Cantidad`,`t`.`PrecioUnitario` AS `PrecioUnitario`,`t`.`PrecioTotal` AS `PrecioTotal`,`t`.`Detalle` AS `Detalle`,`t`.`NumeroDocumento` AS `NumeroDocumento` from ((`gestioninventarios`.`transacciones` `t` join `gestioninventarios`.`tipostransaccion` `tt` on((`t`.`IdTipoTransaccion` = `tt`.`IdTipoTransaccion`))) join `gestioninventarios`.`productos` `p` on((`t`.`IdProducto` = `p`.`IdProducto`))) where (`t`.`Activo` = true);

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
