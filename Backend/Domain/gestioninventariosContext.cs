// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Backend.Domain;

public partial class gestioninventariosContext : DbContext
{
    public gestioninventariosContext(DbContextOptions<gestioninventariosContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Adjuntos> Adjuntos { get; set; }

    public virtual DbSet<Categorias> Categorias { get; set; }

    public virtual DbSet<Historialstock> Historialstock { get; set; }

    public virtual DbSet<Productos> Productos { get; set; }

    public virtual DbSet<Tipostransaccion> Tipostransaccion { get; set; }

    public virtual DbSet<Transacciones> Transacciones { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder
            .UseCollation("utf8mb4_0900_ai_ci")
            .HasCharSet("utf8mb4");

        modelBuilder.Entity<Adjuntos>(entity =>
        {
            entity.HasKey(e => e.Idadjuntos).HasName("PRIMARY");

            entity.ToTable("adjuntos");

            entity.Property(e => e.Idadjuntos).HasColumnName("idadjuntos");
            entity.Property(e => e.Extension).HasMaxLength(45);
            entity.Property(e => e.MimeType).HasMaxLength(45);
            entity.Property(e => e.NombreArchivo).HasMaxLength(45);
            entity.Property(e => e.Ruta).HasMaxLength(255);
        });

        modelBuilder.Entity<Categorias>(entity =>
        {
            entity.HasKey(e => e.IdCategoria).HasName("PRIMARY");

            entity
                .ToTable("categorias")
                .UseCollation("utf8mb4_unicode_ci");

            entity.Property(e => e.Activo)
                .IsRequired()
                .HasDefaultValueSql("'1'");
            entity.Property(e => e.Descripcion).HasMaxLength(255);
            entity.Property(e => e.FechaActualizacion)
                .ValueGeneratedOnAddOrUpdate()
                .HasColumnType("timestamp");
            entity.Property(e => e.FechaCreacion)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<Historialstock>(entity =>
        {
            entity.HasKey(e => e.IdHistorial).HasName("PRIMARY");

            entity
                .ToTable("historialstock")
                .UseCollation("utf8mb4_unicode_ci");

            entity.HasIndex(e => e.IdTransaccion, "FK_HistorialStock_Transacciones");

            entity.HasIndex(e => e.Fecha, "IX_HistorialStock_Fecha");

            entity.HasIndex(e => e.IdProducto, "IX_HistorialStock_Producto");

            entity.Property(e => e.Diferencia).HasComputedColumnSql("`StockNuevo` - `StockAnterior`", true);
            entity.Property(e => e.Fecha)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp");
            entity.Property(e => e.Motivo).HasMaxLength(200);

            entity.HasOne(d => d.IdProductoNavigation).WithMany(p => p.Historialstock)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_HistorialStock_Productos");

            entity.HasOne(d => d.IdTransaccionNavigation).WithMany(p => p.Historialstock)
                .HasForeignKey(d => d.IdTransaccion)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_HistorialStock_Transacciones");
        });

        modelBuilder.Entity<Productos>(entity =>
        {
            entity.HasKey(e => e.IdProducto).HasName("PRIMARY");

            entity
                .ToTable("productos")
                .UseCollation("utf8mb4_unicode_ci");

            entity.HasIndex(e => e.Activo, "IX_Productos_Activo");

            entity.HasIndex(e => e.IdCategoria, "IX_Productos_Categoria");

            entity.HasIndex(e => e.Nombre, "IX_Productos_Nombre");

            entity.HasIndex(e => e.Idadjuntos, "fk_productos_adjuntos1_idx");

            entity.Property(e => e.Activo)
                .IsRequired()
                .HasDefaultValueSql("'1'");
            entity.Property(e => e.Descripcion).HasColumnType("text");
            entity.Property(e => e.FechaActualizacion)
                .ValueGeneratedOnAddOrUpdate()
                .HasColumnType("timestamp");
            entity.Property(e => e.FechaCreacion)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp");
            entity.Property(e => e.Idadjuntos).HasColumnName("idadjuntos");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.Precio).HasPrecision(18, 2);

            entity.HasOne(d => d.IdCategoriaNavigation).WithMany(p => p.Productos)
                .HasForeignKey(d => d.IdCategoria)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Productos_Categorias");

            entity.HasOne(d => d.IdadjuntosNavigation).WithMany(p => p.Productos)
                .HasForeignKey(d => d.Idadjuntos)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_productos_adjuntos1");
        });

        modelBuilder.Entity<Tipostransaccion>(entity =>
        {
            entity.HasKey(e => e.IdTipoTransaccion).HasName("PRIMARY");

            entity
                .ToTable("tipostransaccion")
                .UseCollation("utf8mb4_unicode_ci");

            entity.HasIndex(e => e.Nombre, "Nombre").IsUnique();

            entity.Property(e => e.Activo)
                .IsRequired()
                .HasDefaultValueSql("'1'");
            entity.Property(e => e.Descripcion).HasMaxLength(200);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Transacciones>(entity =>
        {
            entity.HasKey(e => e.IdTransaccion).HasName("PRIMARY");

            entity
                .ToTable("transacciones")
                .UseCollation("utf8mb4_unicode_ci");

            entity.HasIndex(e => e.Fecha, "IX_Transacciones_Fecha");

            entity.HasIndex(e => new { e.Fecha, e.IdTipoTransaccion }, "IX_Transacciones_Fecha_Tipo");

            entity.HasIndex(e => e.IdProducto, "IX_Transacciones_Producto");

            entity.HasIndex(e => e.IdTipoTransaccion, "IX_Transacciones_Tipo");

            entity.Property(e => e.Activo)
                .IsRequired()
                .HasDefaultValueSql("'1'");
            entity.Property(e => e.Detalle).HasMaxLength(500);
            entity.Property(e => e.Fecha)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp");
            entity.Property(e => e.FechaCreacion)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp");
            entity.Property(e => e.NumeroDocumento).HasMaxLength(50);
            entity.Property(e => e.PrecioTotal)
                .HasPrecision(18, 2)
                .HasComputedColumnSql("`Cantidad` * `PrecioUnitario`", true);
            entity.Property(e => e.PrecioUnitario).HasPrecision(18, 2);

            entity.HasOne(d => d.IdProductoNavigation).WithMany(p => p.Transacciones)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Transacciones_Productos");

            entity.HasOne(d => d.IdTipoTransaccionNavigation).WithMany(p => p.Transacciones)
                .HasForeignKey(d => d.IdTipoTransaccion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Transacciones_TiposTransaccion");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}